#pragma once

#include "utils.h"
#include "GLES2_common.h"
enum Lang_STR {
	INERNET_REQ,
	ON2,
	OFF2,
	TRUE2,
	FALSE2,
	DL_ERROR2,
	DL_COMPLETE,
	TRYING_TO_DL2,
	RSTARS,
	DL_CANCELLED,
	DOWNLOADING,
	PAGE2,
	STORAGE,
	PV2,
	STORE_VER,
	SYS_VER,
	AUTHOR2,
	HB_GAME,
	PACKAGE2,
	NAME2,
	EMU,
	EMU_ADDON,
	MEDIA,
	PLUGINS,
	UTLIITY,
	OTHER,
	DL2,
	INSTALL2,
	MORE,
	SIZE2,
	INSTALLING,
	SAPPS,
	IAPPS,
	STRG,
	RINSTALL,
	QUEUE,
	UPDATES,
	SETTINGS,
	SEARCH,
	SORT_BY,
	FILTER_BY,
	ID2,
	VER,
	TYPE2,
	RDATE,
	NUMB_OF_DL,
	INSTALL_FAILED,
	INSTALL_ONGOING,
	TIP1,
	INSTALL_OF,
	COMPLETE,
	FAILED_W_CODE,
	FATAL_ERROR,
	PRESS_OK_CLOSE,
	WARNING2,
	FAILED_TTF,
	SWITCH_TO_EM,
	INI_ERROR,
	DL_CACHE,
	PIG_FAIL,
	NO_USB,
	DUMP,
	UNINSTALL_UPDATE,
	UNINSTAL_UPDATE_FAILED,
	UNINSTALL_SUCCESS,
	UNINSTALL_FAILED,
	DL_FAILED_W,
	NOT_ON_APP,
	NEW_INI,
	STR_TOO_LONG,
	INVAL_PATH,
	PKG_SUF,
	INVAL_CDN,
	INVAL_TTF,
	CACHE_CLEARED,
	CLEARING_CACHE,
	CACHE_FAILED,
	ITEMZ_FEATURE_DISABLED,
	SAVE_ERROR,
	SAVE_SUCCESS,
	DL_FAILED2,
	SERVER_DIS,
	FAILED_TO_PARSE,
	OBJ_EXPECTED,
	CANT_OPEN,
	APP_DIED,
	PKG_TEAM,
	EXCEED_LIMITS,
	ZERO_ITEMS,
	COUNT_NULL,
	DL_ERROR_PAGE,
	ERROR_DL_ASSETS,
	SEARCHING,
	WAITING_FOR_DAEMON,
    STR_NOT_FOUND,
    BETA_REVOKED,
	BETA_LOGGED_IN,
    //SETTINGS
	SETTINGS_1,
    SETTINGS_2,
	SETTINGS_3,
	SETTINGS_4,
	SETTINGS_5,
	SETTINGS_6,
	SETTINGS_7,
	SETTINGS_8,
	SETTINGS_9,
	SETTINGS_10,
    UPDATE_REQ,
	AUTO_FAILURE_ERROR,
	INSTALL_PROG_ERROR,
	CANCEL,
	DL_AND_IN,
	PAUSE_2,
	RESUME_2,
	APP_UPDATE_AVAIL,
	UPDATE_NOW,
	REINSTALL_APP,
    CHECKING_FOR_UPDATES,
    PRE_LOADING_CACHE,
    PRE_LOAD_SETTING,
    UPDATES_STILL_LOADING,
    SHOW_PROG,
    STAY_IN_BACKGROUND,
    INSTALL_COMPLETE,
   //DO NOT DELETE THIS, ALWAYS KEEP AT THE BOTTOM
   LANG_NUM_OF_STRINGS
};

static const char *lang_key[LANG_NUM_OF_STRINGS] = {
    "INERNET_REQ",
    "ON",
    "OFF",
    "TRUE",
    "FALSE",
    "DL_ERROR",
    "DL_COMPLETE",
    "TRYING_TO_DL",
    "RSTARS",
    "DL_CANCELLED",
    "DOWNLOADING",
    "PAGE",
    "STORAGE",
    "PV",
    "STORE_VER",
    "SYS_VER",
    "AUTHOR",
    "HB_GAME",
    "PACKAGE",
    "NAME",
    "EMU",
    "EMU_ADDON",
    "MEDIA",
    "PLUGINS",
    "UTLIITY",
    "OTHER",
    "DL",
    "INSTALL",
    "MORE",
    "SIZE",
    "INSTALLING",
    "SAPPS",
    "IAPPS",
    "STRG",
    "RINSTALL",
    "QUEUE",
    "UPDATES",
    "SETTINGS",
    "SEARCH",
    "SORT_BY",
    "FILTER_BY",
    "ID",
    "VER",
    "TYPE",
    "RDATE",
    "NUMB_OF_DL",
    "INSTALL_FAILED",
    "INSTALL_ONGOING",
    "TIP1",
    "INSTALL_OF",
    "COMPLETE",
    "FAILED_W_CODE",
    "FATAL_ERROR",
    "PRESS_OK_CLOSE",
    "WARNING",
    "FAILED_TTF",
    "SWITCH_TO_EM",
    "INI_ERROR",
    "DL_CACHE",
    "PIG_FAIL",
    "NO_USB",
    "DUMP",
    "UNINSTALL_UPDATE",
    "UNINSTAL_UPDATE_FAILED",
    "UNINSTALL_SUCCESS",
    "UNINSTALL_FAILED",
    "DL_FAILED_W",
    "NOT_ON_APP",
    "NEW_INI",
    "STR_TOO_LONG",
    "INVAL_PATH",
    "PKG_SUF",
    "INVAL_CDN",
    "INVAL_TTF",
    "CACHE_CLEARED",
    "CLEARING_CACHE",
    "CACHE_FAILED",
    "ITEMZ_FEATURE_DISABLED",
    "SAVE_ERROR",
    "SAVE_SUCCESS",
    "DL_FAILED",
    "SERVER_DIS",
    "FAILED_TO_PARSE",
    "OBJ_EXPECTED",
    "CANT_OPEN",
    "APP_DIED",
    "PKG_TEAM",
    "EXCEED_LIMITS",
    "ZERO_ITEMS",
    "COUNT_NULL",
    "DL_ERROR_PAGE",
    "ERROR_DL_ASSETS",
    "SEARCHING",
    "WAITING_FOR_DAEMON",
    "STR_NOT_FOUND",
    "BETA_REVOKED",
    "BETA_LOGGED_IN",
    "SETTINGS_1",
    "SETTINGS_2",
    "SETTINGS_3",
    "SETTINGS_4",
    "SETTINGS_5",
    "SETTINGS_6",
    "SETTINGS_7",
    "SETTINGS_8",
    "SETTINGS_9",
    "SETTINGS_10",
    "UPDATE_REQ",
    "AUTO_FAILURE_ERROR",
    "INSTALL_PROG_ERROR",
    "CANCEL",
    "DL_AND_IN",
    "PAUSE_2",
    "RESUME_2",
    "APP_UPDATE_AVAIL",
    "UPDATE_NOW",
    "REINSTALL_APP",
    "CHECKING_FOR_UPDATES",
    "PRE_LOADING_CACHE",
    "PRE_LOAD_SETTING",
    "UPDATES_STILL_LOADING",
    "SHOW_PROG",
    "STAY_IN_BACKGROUND",
    "INSTALL_COMPLETE",
};

typedef struct
{
	std::string strings[LANG_NUM_OF_STRINGS];
} LangStrings;

#define LANG_DIR "/mnt/sandbox/pfsmnt/NPXS39041-app0/langs/"

//#define LANG_DIR "/data/%i/lang.ini"
//#define OVERRIDE_LANG 3 // 0 JAP
//#define TEST_INI_LANGS 1 
bool LoadLangs(int LangCode);
std::string getLangSTR(Lang_STR str);
int32_t PS4GetLang();
bool load_embdded_eng();